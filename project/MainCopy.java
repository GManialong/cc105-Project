/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project;

import com.mysql.cj.xdevapi.Statement;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author whath
 */
public class MainCopy extends javax.swing.JFrame {

    /**
     * Creates new form Maintainance
     */ Connection con = null;
    PreparedStatement statement = null;
    ResultSet result = null;
    
    public MainCopy() {
        initComponents();
          setExtendedState(JFrame.MAXIMIZED_BOTH);
          try{
           con = DriverManager.getConnection("jdbc:mysql://localhost/userregistration","root","");
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
            fillListView();
       /*   txtName.disable();
           txtEmail.disable();

            txtWhen.disable();

             txtDays.disable();

             txtPeople.disable();
*/
            txtCost.disable();

         //set button to default on and off
         
        btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnSave.setEnabled(false);
        btnClear.setEnabled(false);
        btnCancel.setEnabled(true);
        btnCancel.setText("Close");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListOfStudents = new javax.swing.JTable();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtWhen = new javax.swing.JTextField();
        txtCost = new javax.swing.JTextField();
        txtDays = new javax.swing.JSpinner();
        txtPeople = new javax.swing.JSpinner();
        txtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnSeach = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("NAME");

        btnAdd.setText("add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClear.setText("clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnCancel.setText("cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        tblListOfStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Name", "Email", "Date", "Days", "People", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblListOfStudents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListOfStudentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblListOfStudents);

        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        jLabel2.setText("Please Enter of no.ID you want to Delete");

        btnSeach.setText("search");
        btnSeach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeachActionPerformed(evt);
            }
        });

        jLabel3.setText("EMAIL");

        jLabel4.setText("When");

        jLabel5.setText("days");

        jLabel6.setText("people");

        jLabel7.setText("TOTAL COST");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtId)
                                    .addComponent(jLabel1)
                                    .addComponent(txtName)
                                    .addComponent(txtEmail)
                                    .addComponent(txtWhen)
                                    .addComponent(txtCost)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnAdd)
                                                .addGap(41, 41, 41)
                                                .addComponent(btnSave)
                                                .addGap(36, 36, 36)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnClear)
                                        .addGap(18, 18, 18))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(txtPeople, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addComponent(btnCancel))
                            .addComponent(jLabel4))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(257, 257, 257))
            .addGroup(layout.createSequentialGroup()
                .addGap(749, 749, 749)
                .addComponent(btnSeach, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSeach, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWhen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPeople, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnSave)
                            .addComponent(btnClear)
                            .addComponent(btnCancel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addGap(280, 280, 280))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblListOfStudentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListOfStudentsMouseClicked
     
  btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnSave.setEnabled(false);
        btnClear.setEnabled(false);
        btnCancel.setEnabled(true);
        btnCancel.setText("Close");
                
        String name;
        String email;
        String when;
        int days;
        int people;
        String cost;
      //  String age;
      //  String contactNumber;
      //  String emailAddress;
      //  String address;
        
        int row = tblListOfStudents.getSelectedRow();
        
        name = (tblListOfStudents.getModel().getValueAt(row,0).toString());
        email = (tblListOfStudents.getModel().getValueAt(row,1).toString());
        when = (tblListOfStudents.getModel().getValueAt(row,2).toString());
        days= (int) (tblListOfStudents.getModel().getValueAt(row,3));
        people = (int) (tblListOfStudents.getModel().getValueAt(row,4));
        cost = (tblListOfStudents.getModel().getValueAt(row,5).toString());
       // age = (tblListOfStudents.getModel().getValueAt(row,6).toString());
       // contactNumber = (tblListOfStudents.getModel().getValueAt(row,7).toString());
       // emailAddress = (tblListOfStudents.getModel().getValueAt(row,8).toString());
       // address = (tblListOfStudents.getModel().getValueAt(row,9).toString());
           
       txtName.setText(name);
        txtEmail.setText(email);
        txtWhen.setText(when);
        txtDays.setValue(days);
     
        txtPeople.setValue(people);
       txtCost.setText(cost);
        
        
    }//GEN-LAST:event_tblListOfStudentsMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
         if(txtName.getText().isEmpty()   || txtEmail.getText().isEmpty()){ 
         
         //    || txtSection.getText().isEmpty() || txtPronouns.getText().isEmpty() || txtBloodType.getText().isEmpty()
             
            JOptionPane.showMessageDialog(this, "Complete all fields with correct entries!",
                                   "ERROR", JOptionPane.ERROR_MESSAGE);
        } else  
        {
            
            String Name;
            String Email;
            String When;
         int numDays = (int)txtDays.getValue();
         int numPeople = (int) txtPeople.getValue();
         int cost;
         int days = 50;
         int people = 10;
         int sum = numDays * days;
         int ptotal = numPeople * people;
          int totalPrice = (sum +ptotal);
          cost = totalPrice;
         txtCost.setText("Total Price: $" + totalPrice);
       

        
            Name = txtName.getText();
            Email = txtEmail.getText();
            When = txtWhen.getText();
         
           numDays = (int) txtDays.getValue();
           numPeople = (int) txtPeople.getValue();
       //   cost = (int) txtCost.getValue();
          
            try{
               // String query = "SELECT * registration FROM users WHERE username = ?";
                String query = "SELECT * FROM transaction WHERE email = ?";

PreparedStatement statement = con.prepareStatement(query);
statement.setString(1, Email);
ResultSet result = statement.executeQuery();

if (result.next()) {
    // Username exists, do not allow login
    JOptionPane.showMessageDialog(this, "Email is already taken. Please choose a different one.", "Error", JOptionPane.ERROR_MESSAGE);
     txtEmail.setText("");
       
} else {
    // Username does not exist, proceed with login
    // ...


                //String query = "INSERT INTO `demo_table`(`Username`, `Password`) VALUES ('"+Username+"','"+Password+"')";
            query = "INSERT INTO `transaction`(`name`, `email`, `date`, `days`, `people`,`cost`) " + "VALUES ('"+Name+"','"+Email+"','"+When+"','"+numDays+"','"+numPeople+"','"+cost+"')";
                statement = con.prepareStatement(query);
                statement.executeUpdate();

           //     JOptionPane.showMessageDialog(this, "Registration has  Been Successfully Saved!","INFORMATION",JOptionPane.INFORMATION_MESSAGE);
 JOptionPane.showMessageDialog(this,"THANK YOU ! YOURE RESERVATION COMPLETE ");
       JOptionPane.showMessageDialog(this,"Rservation Information  "+"\nName :"+Name+"\nEmail :"+Email+"\nWhen :"+When+"\nNumber of Days :"+numDays+"\nNumber of People :"+numPeople+"\nTotal cost :$"+totalPrice);
  fillListView();
}
            }catch(Exception e){
                System.out.println(e.getMessage());
            }
            if (numDays <= 0||numPeople <= 0) {
    JOptionPane.showMessageDialog(this, "Please enter a valid number of days And number of people");
   
     
     }else{
    
     /*  MainForm mainform = new MainForm();
       mainform.setVisible(true);
       this.dispose();*/
     //wait may naisip ako mag astiggg 
    
            
        }
         
        }
           if(txtName.getText().isEmpty() || txtEmail.getText().isEmpty()       ){
            JOptionPane.showMessageDialog(this, "Complete all fields with correct entries!",
                                   "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
          
            String Name;
            String Email;
            String When;
         int numDays = (int)txtDays.getValue();
         int numPeople = (int) txtPeople.getValue();
          
        
            Name=txtName.getText();
            Email = txtEmail.getText();
            When =txtWhen.getText();
            numDays = (int) txtDays.getValue();
           
            numPeople = (int) txtPeople.getValue();
        //    cost = txtCost.getText();
         
            
            try{
                //String query = "INSERT INTO `demo_table`(`Username`, `Password`) VALUES ('"+Username+"','"+Password+"')";
                //String  query = "INSERT INTO `studenttbl`(`studentNumber`, `lastName`, `firstName`, `middleName`, `age`, `address`, `contactNumber`, `emailAddress`, `birthday`, `course`) VALUES ('"+studentNumber+"','"+lastName+"','"+firstName+"','"+middleName+"','"+age+"','"+address+"','"+contactNumber+"','"+emailAddress+"','"+bday+"','"+course+"')";
                String query = "UPDATE `registration` SET `name`='"+Name+"',`When`='"+When+"',`days`='"+numDays+"',`people`='"+numPeople+"'";
                statement = con.prepareStatement(query);
                statement.executeUpdate();
                
                JOptionPane.showMessageDialog(this, " Record Has Been Successfully Saved!","INFORMATION",JOptionPane.INFORMATION_MESSAGE);
                
                fillListView();
                        
                txtName.setText("");
                txtEmail.setText("");
                txtWhen.setText("");
                txtDays.setValue("");
                
                txtPeople.setValue("");
                txtCost.setText("");
                
                
                txtName.setEnabled(false);
                txtEmail.setEnabled(false);
                txtWhen.setEnabled(false);
                txtDays.setEnabled(false);
              
                txtPeople.setEnabled(false);
                   txtCost.setEnabled(false);
               
               
                //set button to default on and off
                btnAdd.setEnabled(true);
                btnEdit.setEnabled(false);
                btnDelete.setEnabled(true);
                btnSave.setEnabled(false);
                btnClear.setEnabled(false);
                btnCancel.setEnabled(true);
                btnCancel.setText("Close");
                
            }catch(Exception e){
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
      /*  // TODO add your handling code here:
        /*  txtName.setText("");
        txtEmail.setText("");
        txtWhen.setText("");
        txtDays.setValue("");
       
        txtPeople.setValue("");
        txtCost.setText("");
       */
        
        txtName.setEnabled(true);
        txtName.setBackground(Color.white);
        txtEmail.setEnabled(true);
        txtEmail.setBackground(Color.white);
        txtWhen.setEnabled(true);
        txtWhen.setBackground(Color.white);
        txtDays.setEnabled(true);
        txtDays.setBackground(Color.white);
    
        txtPeople.setEnabled(true);
        txtPeople.setBackground(Color.white);
        txtCost.setEnabled(true);
        txtCost.setBackground(Color.white);
       
        
        btnAdd.setEnabled(false);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnSave.setEnabled(true);
        btnClear.setEnabled(true);
        btnCancel.setEnabled(true);
        btnCancel.setText("Cancel");
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
 
        // TODO add your handling code here:
        boolean continueEditing = true;
while (continueEditing) {
       try {
    // Connection setup and prepare statement code here
    
    String input = JOptionPane.showInputDialog("Enter ID of record to edit:");
    String query = "SELECT * FROM transaction WHERE id = ?";
    PreparedStatement statement = con.prepareStatement(query);
   statement.setString(1, input);
    ResultSet result = statement.executeQuery();
    
    // Check if a record with the given ID was found
    if (result.next()) {
        // Prompt user for updated data
        String name = JOptionPane.showInputDialog("Enter new name:");
        String email = JOptionPane.showInputDialog("Enter new email:");
        String When = JOptionPane.showInputDialog("Enter new Date");
        String days = JOptionPane.showInputDialog("how many  days");
        String people  = JOptionPane.showInputDialog("how many people");
        int numDays = Integer.parseInt(days);
        int numPeople = Integer.parseInt(people);
        int d = 50,p=10;
        int totalCost = (numDays * d) + (numPeople * p);
        
        String cost = String.valueOf(totalCost);
        
       
        // Update the record in the database
        query = "UPDATE transaction SET name=?, email=?, date=?, days=?, people=?, cost=? WHERE id=?";
         statement = con.prepareStatement(query);
        statement.setString(1, name);
        statement.setString(2, email);
          statement.setString(3, When);
            statement.setString(4, days);
                        statement.setString(5, people);
            statement.setString(6, cost);

        statement.setString(7, input);
        int numRowsAffected =  statement.executeUpdate();
        
        if (numRowsAffected == 1) {
            JOptionPane.showMessageDialog(null, "Record updated successfully.");
             fillListView();
        } else {
            JOptionPane.showMessageDialog(null, "Failed to update record.");
        }
    } else {
        JOptionPane.showMessageDialog(null, "Record not found.");
    }
      int choice = JOptionPane.showConfirmDialog(null, "Do you want to edit another record?", "Edit Again?", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.NO_OPTION) {
            continueEditing = false;
        }
    result.close();
     statement.close();
   
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Error updating record: " + ex.getMessage());
   
}
      
}        try {
    con.close();
         } catch (SQLException ex) {
             Logger.getLogger(MainCopy.class.getName()).log(Level.SEVERE, null, ex);
         }
 MainCopy mainCopy = new MainCopy();
    mainCopy.setVisible(true);
    JOptionPane.showMessageDialog(this,"REFRESH");
    this.dispose();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
int id = Integer.parseInt(txtId.getText());
     //   String email = txtEmail.getText();
        
            int result = JOptionPane.showConfirmDialog(this,"Are you sure you want to delete the selected record?", "DELETE RECORD",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if(result == JOptionPane.YES_OPTION){
                
                try{
                    String  query = "DELETE FROM `transaction` WHERE `id` = '"+id+"'";
                    statement = con.prepareStatement(query);
                    statement.execute();
                    
                    JOptionPane.showMessageDialog(this, "Message has been successfully deleted!","INFORMATION", JOptionPane.OK_OPTION);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,"Error in deleting... "+e);
                }
            
                }else if (result == JOptionPane.NO_OPTION){
                   
                }
    
       fillListView();
      
      
    }//GEN-LAST:event_btnDeleteActionPerformed
    
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
            txtName.setText("");
        txtEmail.setText("");
        txtWhen.setText("");
        txtDays.setValue("");
       
        txtPeople.setValue("");
        txtCost.setText("");

    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
           if (btnCancel.getText().equals("Close"))
        {
            System.exit(0);
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void btnSeachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeachActionPerformed
  boolean continueSearching = true;
try {
    // Connection setup and prepare statement code here
    while (continueSearching) {
        String input = JOptionPane.showInputDialog("Enter ID or name to search:");
        String query = "SELECT * FROM transaction WHERE id = ? OR name LIKE ?";
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, input);
        statement.setString(2, "%" + input + "%");
        ResultSet result = statement.executeQuery();

        StringBuilder sb = new StringBuilder();
        sb.append("Search results:\n");
        while (result.next()) {
            String id = result.getString("id");
            String name = result.getString("name");
            String email = result.getString("email");
            sb.append("ID: ").append(id).append("\n")
              .append("Name: ").append(name).append("\n")
              .append("Email: ").append(email).append("\n\n");
        }
        result.close();
        statement.close();

        JOptionPane.showMessageDialog(null, sb.toString());

        int choice = JOptionPane.showConfirmDialog(null, "Do you want to search again?", "Search Again?", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.NO_OPTION) {
            continueSearching = false;
        }
    }
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Error searching database: " + ex.getMessage());
    MainCopy mainCopy = new MainCopy();
    mainCopy.setVisible(true);
    JOptionPane.showMessageDialog(this,"REFRESH");
    this.dispose();
} finally {
    try {
        con.close();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error closing database connection: " + ex.getMessage());
    }
}
 MainCopy mainCopy = new MainCopy();
    mainCopy.setVisible(true);
    JOptionPane.showMessageDialog(this,"REFRESH");
    this.dispose();

    }//GEN-LAST:event_btnSeachActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainCopy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainCopy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainCopy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainCopy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainCopy().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSeach;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblListOfStudents;
    private javax.swing.JTextField txtCost;
    private javax.swing.JSpinner txtDays;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JSpinner txtPeople;
    private javax.swing.JTextField txtWhen;
    // End of variables declaration//GEN-END:variables

    private void fillListView() {
      try{

            String  query = "SELECT * FROM `transaction`";
            statement = con.prepareStatement(query);
            result = statement.executeQuery();
            DefaultTableModel tm = (DefaultTableModel)tblListOfStudents.getModel();
            tm.setRowCount(0);

            while(result.next()){
                Object o[] = {result.getString("id"),result.getString("name"),result.getString("email"),result.getString("date"),result.getString("days"),result.getString("people"),result.getString("cost")};
                tm.addRow(o);
                }
            }
            catch(Exception e){

                JOptionPane.showMessageDialog(null,"Error in Employee Grid View..... "+e);
            }
    }
}

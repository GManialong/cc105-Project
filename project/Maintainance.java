/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project;

import com.mysql.cj.xdevapi.Statement;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author whath
 */
public class Maintainance extends javax.swing.JFrame {

    /**
     * Creates new form Maintainance
     */ Connection con = null;
    PreparedStatement statement = null;
    ResultSet result = null;
    
    public Maintainance() {
        initComponents();
          setExtendedState(JFrame.MAXIMIZED_BOTH);
          try{
           con = DriverManager.getConnection("jdbc:mysql://localhost/userregistration","root","");
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
            fillListView();
          txtName.disable();
           txtEmail.disable();

            txtWhen.disable();

             txtDays.disable();

             txtPeople.disable();

            txtCost.disable();

         //set button to default on and off
        btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnSave.setEnabled(false);
        btnClear.setEnabled(false);
        btnCancel.setEnabled(true);
        btnCancel.setText("Close");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListOfStudents = new javax.swing.JTable();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtWhen = new javax.swing.JTextField();
        txtCost = new javax.swing.JTextField();
        txtDays = new javax.swing.JSpinner();
        txtPeople = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("NAME");

        btnAdd.setText("add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClear.setText("clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnCancel.setText("cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        tblListOfStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Email", "Date", "Days", "People", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblListOfStudents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListOfStudentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblListOfStudents);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtWhen, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPeople, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(18, 18, 18)
                                .addComponent(btnEdit)
                                .addGap(33, 33, 33)
                                .addComponent(btnDelete))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnSave)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear)
                                .addGap(30, 30, 30)
                                .addComponent(btnCancel)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(257, 257, 257))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtWhen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPeople, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnEdit)
                            .addComponent(btnDelete))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave)
                            .addComponent(btnClear)
                            .addComponent(btnCancel))))
                .addContainerGap(286, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblListOfStudentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListOfStudentsMouseClicked
     
  btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnSave.setEnabled(false);
        btnClear.setEnabled(false);
        btnCancel.setEnabled(true);
        btnCancel.setText("Close");
                
        String name;
        String email;
        String when;
        int days;
        int people;
        int cost;
        String age;
        String contactNumber;
        String emailAddress;
        String address;
        
        int row = tblListOfStudents.getSelectedRow();
        
        name = (tblListOfStudents.getModel().getValueAt(row,0).toString());
        email = (tblListOfStudents.getModel().getValueAt(row,1).toString());
        when = (tblListOfStudents.getModel().getValueAt(row,2).toString());
        days= (int) (tblListOfStudents.getModel().getValueAt(row,3));
        people = (int) (tblListOfStudents.getModel().getValueAt(row,4));
        cost = (int) (tblListOfStudents.getModel().getValueAt(row,5));
        age = (tblListOfStudents.getModel().getValueAt(row,6).toString());
        contactNumber = (tblListOfStudents.getModel().getValueAt(row,7).toString());
        emailAddress = (tblListOfStudents.getModel().getValueAt(row,8).toString());
        address = (tblListOfStudents.getModel().getValueAt(row,9).toString());
           
       txtName.setText(name);
        txtEmail.setText(email);
        txtWhen.setText(when);
        txtDays.setValue(days);
     
        txtPeople.setValue(people);
      //  txtCost.setValue(cost);
        
        
    }//GEN-LAST:event_tblListOfStudentsMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
         if(txtName.getText().isEmpty()   || txtEmail.getText().isEmpty()){ 
         
         //    || txtSection.getText().isEmpty() || txtPronouns.getText().isEmpty() || txtBloodType.getText().isEmpty()
             
            JOptionPane.showMessageDialog(this, "Complete all fields with correct entries!",
                                   "ERROR", JOptionPane.ERROR_MESSAGE);
        } else  
        {
            
            String Name;
            String Email;
            String When;
         int numDays = (int)txtDays.getValue();
         int numPeople = (int) txtPeople.getValue();
         int cost;
         int days = 50;
         int people = 10;
         int sum = numDays * days;
         int ptotal = numPeople * people;
          int totalPrice = (sum +ptotal);
          cost = totalPrice;
         txtCost.setText("Total Price: $" + totalPrice);
       

        
            Name = txtName.getText();
            Email = txtEmail.getText();
            When = txtWhen.getText();
         
           numDays = (int) txtDays.getValue();
           numPeople = (int) txtPeople.getValue();
       //   cost = (int) txtCost.getValue();
          
            try{
               // String query = "SELECT * registration FROM users WHERE username = ?";
                String query = "SELECT * FROM registration WHERE email = ?";

PreparedStatement statement = con.prepareStatement(query);
statement.setString(1, Email);
ResultSet result = statement.executeQuery();

if (result.next()) {
    // Username exists, do not allow login
    JOptionPane.showMessageDialog(this, "Email is already taken. Please choose a different one.", "Error", JOptionPane.ERROR_MESSAGE);
     txtEmail.setText("");
       
} else {
    // Username does not exist, proceed with login
    // ...


                //String query = "INSERT INTO `demo_table`(`Username`, `Password`) VALUES ('"+Username+"','"+Password+"')";
            query = "INSERT INTO `transaction`(`name`, `email`, `date`, `days`, `people`,`cost`) " + "VALUES ('"+Name+"','"+Email+"','"+When+"','"+numDays+"','"+numPeople+"','"+cost+"')";
                statement = con.prepareStatement(query);
                statement.executeUpdate();

           //     JOptionPane.showMessageDialog(this, "Registration has  Been Successfully Saved!","INFORMATION",JOptionPane.INFORMATION_MESSAGE);
 JOptionPane.showMessageDialog(this,"THANK YOU ! YOURE RESERVATION COMPLETE ");
       JOptionPane.showMessageDialog(this,"Rservation Information  "+"\nName :"+Name+"\nEmail :"+Email+"\nWhen :"+When+"\nNumber of Days :"+numDays+"\nNumber of People :"+numPeople+"\nTotal cost :$"+totalPrice);

}
            }catch(Exception e){
                System.out.println(e.getMessage());
            }
            if (numDays <= 0||numPeople <= 0) {
    JOptionPane.showMessageDialog(this, "Please enter a valid number of days And number of people");
   
     
     }else{
    
     /*  MainForm mainform = new MainForm();
       mainform.setVisible(true);
       this.dispose();*/
     //wait may naisip ako mag astiggg 
    
            
        }
         
        }
           if(txtName.getText().isEmpty() || txtEmail.getText().isEmpty()       ){
            JOptionPane.showMessageDialog(this, "Complete all fields with correct entries!",
                                   "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
           String Name;
            String Email;
            String When;
         int numDays = (int)txtDays.getValue();
         int numPeople = (int) txtPeople.getValue();
          
        
            Name=txtName.getText();
            Email = txtEmail.getText();
            When =txtWhen.getText();
            numDays = (int) txtDays.getValue();
           
            numPeople = (int) txtPeople.getValue();
        //    cost = txtCost.getText();
         
            
            try{
                //String query = "INSERT INTO `demo_table`(`Username`, `Password`) VALUES ('"+Username+"','"+Password+"')";
                //String  query = "INSERT INTO `studenttbl`(`studentNumber`, `lastName`, `firstName`, `middleName`, `age`, `address`, `contactNumber`, `emailAddress`, `birthday`, `course`) VALUES ('"+studentNumber+"','"+lastName+"','"+firstName+"','"+middleName+"','"+age+"','"+address+"','"+contactNumber+"','"+emailAddress+"','"+bday+"','"+course+"')";
                String query = "UPDATE `registration` SET `name`='"+Name+"',`When`='"+When+"',`days`='"+numDays+"',`people`='"+numPeople+"'";
                statement = con.prepareStatement(query);
                statement.executeUpdate();
                
                JOptionPane.showMessageDialog(this, "Student Record Has Been Successfully Saved!","INFORMATION",JOptionPane.INFORMATION_MESSAGE);
                
                fillListView();
                        
                txtName.setText("");
                txtEmail.setText("");
                txtWhen.setText("");
                txtDays.setValue("");
                
                txtPeople.setValue("");
                txtCost.setText("");
                
                
                txtName.setEnabled(false);
                txtEmail.setEnabled(false);
                txtWhen.setEnabled(false);
                txtDays.setEnabled(false);
              
                txtPeople.setEnabled(false);
                txtCost.setText("mm/dd/yyyy");
               
                //set button to default on and off
                btnAdd.setEnabled(true);
                btnEdit.setEnabled(false);
                btnDelete.setEnabled(false);
                btnSave.setEnabled(false);
                btnClear.setEnabled(false);
                btnCancel.setEnabled(true);
                btnCancel.setText("Close");
                
            }catch(Exception e){
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        /*  txtName.setText("");
        txtEmail.setText("");
        txtWhen.setText("");
        txtDays.setValue("");
       
        txtPeople.setValue("");
        txtCost.setText("");
       */
        
        txtName.setEnabled(true);
        txtName.setBackground(Color.white);
        txtEmail.setEnabled(true);
        txtEmail.setBackground(Color.white);
        txtWhen.setEnabled(true);
        txtWhen.setBackground(Color.white);
        txtDays.setEnabled(true);
        txtDays.setBackground(Color.white);
    
        txtPeople.setEnabled(true);
        txtPeople.setBackground(Color.white);
        txtCost.setEnabled(true);
        txtCost.setBackground(Color.white);
       
        
        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnSave.setEnabled(true);
        btnClear.setEnabled(true);
        btnCancel.setEnabled(true);
        btnCancel.setText("Cancel");
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
         btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnSave.setEnabled(true);
        btnClear.setEnabled(true);
        btnCancel.setEnabled(true);
        btnCancel.setText("Cancel");
        btnSave.setText("Update");
        
       txtName.setEnabled(true);
        txtName.setBackground(Color.white);
        txtEmail.setEnabled(true);
        txtEmail.setBackground(Color.white);
        txtWhen.setEnabled(true);
        txtWhen.setBackground(Color.white);
        txtDays.setEnabled(true);
        txtDays.setBackground(Color.white);
    
        txtPeople.setEnabled(true);
        txtPeople.setBackground(Color.white);
        txtCost.setEnabled(true);
        txtCost.setBackground(Color.white);
       
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
try {
      int id = 0;
    String sql = "DELETE FROM transaction WHERE id=?";
    PreparedStatement statement = con.prepareStatement(sql);
    
 
    statement.setInt(1, id); // id is the primary key of the row to be deleted
    statement.executeUpdate();
    JOptionPane.showMessageDialog(null, "Data deleted successfully");
    
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Error deleting data: " + e.getMessage());
} finally {
    try {
        // close the PreparedStatement and the Connection
        statement.close();
        con.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
}
      

 
    }//GEN-LAST:event_btnDeleteActionPerformed
    
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
            txtName.setText("");
        txtEmail.setText("");
        txtWhen.setText("");
        txtDays.setValue("");
       
        txtPeople.setValue("");
        txtCost.setText("");

    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
           if (btnCancel.getText().equals("Close"))
        {
            System.exit(0);
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Maintainance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Maintainance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Maintainance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Maintainance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Maintainance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblListOfStudents;
    private javax.swing.JTextField txtCost;
    private javax.swing.JSpinner txtDays;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JSpinner txtPeople;
    private javax.swing.JTextField txtWhen;
    // End of variables declaration//GEN-END:variables

    private void fillListView() {
      try{

            String  query = "SELECT * FROM `transaction`";
            statement = con.prepareStatement(query);
            result = statement.executeQuery();
            DefaultTableModel tm = (DefaultTableModel)tblListOfStudents.getModel();
            tm.setRowCount(0);

            while(result.next()){
                Object o[] = {result.getString("name"),result.getString("email"),result.getString("date"),result.getString("days"),result.getString("people"),result.getString("cost")};
                tm.addRow(o);
                }
            }
            catch(Exception e){

                JOptionPane.showMessageDialog(null,"Error in Employee Grid View..... "+e);
            }
    }
}
